// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator zod {
    provider         = "npx zod-prisma-types"
    output           = "../generated/schemas"
    useMultipleFiles = true
    createInputTypes = false
}

datasource db {
    provider = "mysql"
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Event {
    id              String      @id @default(cuid())
    name            String // event title
    description     String      @db.Text
    startDateTime   DateTime
    endDateTime     DateTime
    image           String      @default("")
    price           Float       @default(0)
    maxParticipants Int?        @default(0)
    inviteLink      String?
    streetAddress   String?
    city            String?
    state           String?
    zip             String?
    lat             Float? // for google map api
    lng             Float? // for google map api
    status          EventStatus @default(UPCOMING)
    isPrivate       Boolean     @default(false) // flag for private event or public event
    isFree          Boolean     @default(true) // flag for free or fee required

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    eventParticipants EventParticipants[]

    @@index([name])
}

enum EventStatus {
    UPCOMING
    IN_PROGRESS
    COMPLETED
    CANCELED
}

model EventParticipants {
    id String @id @default(cuid())

    user   User   @relation(fields: [userId], references: [id])
    userId String

    event   Event  @relation(fields: [eventId], references: [id])
    eventId String

    createdAt DateTime @default(now()) // record when they join
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                String              @id @default(cuid())
    name              String? // Discord profile name
    username          String?             @unique // Credentials username
    password          String? // Credentials password
    firstName         String?
    lastName          String?
    email             String?             @unique
    emailVerified     DateTime?
    role              Role                @default(USER)
    image             String?
    accounts          Account[]
    sessions          Session[]
    events            Event[]
    eventParticipants EventParticipants[]
}

enum Role {
    USER
    ADMIN
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
